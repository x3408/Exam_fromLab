<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.0.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.exam.www.security" />
    <!-- <beans:bean class="org.springframework.security.data.repository.query.SecurityEvaluationContextExtension"/> -->
    <!--对指定的请求不做验证-->
    <http pattern="/login" security="none" />
    <http pattern="/resources/**" security="none" />
    <http pattern="/wechat/**" security="none" />
    <http pattern="/file/**" security="none" />
    <http pattern="/protal/**" security="none"/>
    <http pattern="/exam/testPaper/produceBySql" security="none"/>
    <http pattern="/exam/testPaper/producePlus" security="none"/>
    <http pattern="/exam/testPaper/submit" security="none"/>
<!--     <http pattern="/**/*.jpg" security="none" />
     <http pattern="/**/*.png" security="none" />
     <http pattern="/**/*.gif" security="none" />-->
    <!--默认配置10个过滤器-->
    <http auto-config="true">
        <!--拦截指定的url,且通过access指定访问权限为不允许匿名访问-->
        <intercept-url pattern="/admin/**" access="isAuthenticated()" />
        <!--登录成功后没有权限访问跳转的页面-->
        <access-denied-handler error-page="/403" />
        <!--自定义的表单登录与退出页面-->
        <form-login login-page="/login" password-parameter="password"
                    username-parameter="username" login-processing-url="/j_spring_security_check"
                    authentication-failure-url="/login?error" default-target-url="/mainMenu"
                    always-use-default-target="true" />
        <logout logout-url="/j_spring_security_logout" />



        <!-- 检测失效的sessionId,超时时定位到另外一个URL, -->
        <!--<session-management
            session-authentication-error-url="/login"
            invalid-session-url="/login" session-fixation-protection="migrateSession">-->
        <session-management invalid-session-url="/login?invalid">
            <!-- 防止多端登录-->
            <concurrency-control max-sessions="3"
                error-if-maximum-exceeded="false" expired-url="/error" />
        </session-management >


        <!-- 开启csrf保护enable csrf protection -->
        <csrf disabled="true" />

        <!-- Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器，
        并且该过滤器必须在springSecurity执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行，
        因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
        我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
        因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口，
        AccessDecisionManager接口，UserDetailsService 接口，只要重写了这3个接口， 然后再spring配置文件中做相应的配置，
        项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。 -->


        <!--FilterSecurityInterceptor负责处理HTTP资源的安全性,整个过程需要
        依赖AuthenticationManager、AccessDecisionManager和FilterInvocationSecurityMetadataSource。-->
        <!--引入自定义的SecurityFilter来控制安全在FILTER_SECURITY之前-->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
    </http>
    <!--使用自定义类从数据库中获得用户信息-->
    <authentication-manager alias="myAuthenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <password-encoder hash="md5">
                <!--<salt-source user-property="username" />-->
            </password-encoder>
        </authentication-provider>
    </authentication-manager>
</beans:beans>
